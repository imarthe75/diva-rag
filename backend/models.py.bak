from sqlalchemy import Column, String, LargeBinary, Integer, DateTime, Text, BigInteger, UUID
from sqlalchemy.dialects.postgresql import JSONB # <-- ADD THIS LINE for JSONB
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func # Para usar funciones de la DB como NOW()

# Define la Base declarativa para tus modelos SQLAlchemy
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    id = Column(UUID(as_uuid=True), primary_key=True, server_default=func.gen_random_uuid())
    username = Column(String(255), unique=True, nullable=False)
    password_hash = Column(Text, nullable=False)
    email = Column(String(255), unique=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())

    def __repr__(self):
        return f"<User(id='{self.id}', username='{self.username}')>"

class EncryptedFile(Base):
    __tablename__ = 'files' # El nombre de la tabla es 'files'

    id = Column(UUID(as_uuid=True), primary_key=True, server_default=func.gen_random_uuid())
    user_id = Column(UUID(as_uuid=True), nullable=False) # Clave foránea a la tabla users
    ceph_path = Column(Text, nullable=False) # Ruta o clave del objeto en MinIO
    encryption_key_encrypted = Column(LargeBinary, nullable=False) # Clave de encriptación del archivo, encriptada
    original_filename = Column(Text, nullable=False)
    mimetype = Column(Text)
    size_bytes = Column(BigInteger)
    upload_timestamp = Column(DateTime(timezone=True), server_default=func.now())
    file_metadata = Column(JSONB, nullable=True) # Para almacenar metadatos variables

    # Nuevos campos para el estado de procesamiento
    processed_status = Column(String(50), default='pending')
    last_processed_at = Column(DateTime(timezone=True))

    def __repr__(self):
        return (f"<EncryptedFile(id='{self.id}', original_filename='{self.original_filename}', "
                f"user_id='{self.user_id}', status='{self.processed_status}')>")
